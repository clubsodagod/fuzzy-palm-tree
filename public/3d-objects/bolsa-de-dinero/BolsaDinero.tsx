/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 BolsaDinero.gltf -k -K -t -T s 
Files: BolsaDinero.gltf [13.02KB] > C:\Users\owner\Desktop\maliek_davis\public\3d-objects\bolsa-de-dinero\BolsaDinero-transformed.glb [714.29KB] (-5386%)
Author: LM.Bacilio (https://sketchfab.com/LM.Bacilio)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/bolsa-money-b5f5e9b35a434b99890ddae431d2dcec
Title: BOLSA MONEY
*/

import * as THREE from 'three'
import React from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { JoinGrowthProps } from '@/library/types/common';
import { useResponsiveValues as useRVs } from '@/utility/functions';
import { useFrame } from '@react-three/fiber';

type ActionName = 'BOLSA_MONEYAction'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    Object_4: THREE.Mesh
    Object_5: THREE.Mesh
    Object_6: THREE.Mesh
    Object_7: THREE.Mesh
    Object_8: THREE.Mesh
  }
  materials: {
    mat0_SIMBOLO: THREE.MeshStandardMaterial
    mat0_CUERDA: THREE.MeshStandardMaterial
    mat0_BILLETE: THREE.MeshStandardMaterial
    mat0_BOLSA: THREE.MeshStandardMaterial
    mat0_MONEDAS: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

const BolsaDinero: React.FC<JoinGrowthProps> = ({ animate, ...props }) => {
  const group = React.useRef<THREE.Group>(null)
  const { nodes, materials, animations } = useGLTF('/3d-objects/bolsa-de-dinero/BolsaDinero-transformed.glb') as GLTFResult
  const { actions } = useAnimations(animations, group);

  const radius = useRVs([5, 5, 5]);
  const radiusZ = useRVs([0,0,1]);

  useFrame(({clock}) => {
    const elapsedTime = clock.getElapsedTime();
    if (group.current ) {  // Ensure that group.current is defined
        if(animate?.animationOrbit){
        group.current.position.x = radius * Math.sin(elapsedTime/1.75);
        group.current.position.y = radius * Math.cos(elapsedTime/1.75);
        group.current.position.z = radiusZ * Math.sin(elapsedTime/1);
      }
    }
    if(actions.BOLSA_MONEYAction) {
      actions.BOLSA_MONEYAction.play()
    }
  })
  return (
    <group ref={group} {...props} dispose={null} castShadow>
      <group name="Sketchfab_Scene">
        <group name="GLTF_SceneRootNode">
          <group name="BOLSA_MONEY_0" position={[0, 0.8, 0]} rotation={[Math.PI / 2, 0, 0]} castShadow >
            <mesh name="Object_4" geometry={nodes.Object_4.geometry} material={materials.mat0_SIMBOLO} castShadow/>
            <mesh name="Object_5" geometry={nodes.Object_5.geometry} material={materials.mat0_CUERDA}  castShadow />
            <mesh name="Object_6" geometry={nodes.Object_6.geometry} material={materials.mat0_BILLETE}  castShadow />
            <mesh name="Object_7" geometry={nodes.Object_7.geometry} material={materials.mat0_BOLSA}   castShadow/>
            <mesh name="Object_8" geometry={nodes.Object_8.geometry} material={materials.mat0_MONEDAS}  castShadow />
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/3d-objects/bolsa-de-dinero/BolsaDinero-transformed.glb')
export default BolsaDinero;